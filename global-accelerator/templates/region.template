{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Transform": [
    "AWS::LanguageExtensions",
    "AWS::Serverless-2016-10-31"
  ],
  "Description": "Top-level template for setting-up and modifying *regional* Global Accelerator endpoint group infrastructure.",
  "Mappings": {
    "Fn::Transform": {
      "Name": "AWS::Include",
      "Parameters": {
        "Location": "../config/global-config.json"
      }
    },
    "RegionConfig": {
      "Fn::Transform": {
        "Name": "AWS::Include",
        "Parameters": {
          "Location": "../region-config.json.combined"
        }
      }
    }
  },
  "Resources": {
    "Vpc": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "172.16.0.0/16",
        "EnableDnsSupport": true,
        "EnableDnsHostnames": true
      }
    },
    "Subnet": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": {
                "Ref": "AWS::Region"
              }
            }
          ]
        },
        "VpcId": {
          "Ref": "Vpc"
        },
        "CidrBlock": "172.16.0.0/24",
        "MapPublicIpOnLaunch": true
      }
    },
    "Gateway": {
      "Type": "AWS::EC2::InternetGateway",
      "DependsOn": [
        "Vpc"
      ],
      "Properties": {}
    },
    "GatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        },
        "InternetGatewayId": {
          "Ref": "Gateway"
        }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "Vpc"
        }
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "Gateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "Gateway"
        }
      }
    },
    "RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "SubnetId": {
          "Ref": "Subnet"
        }
      }
    },
    "Instance": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": [
        "Subnet"
      ],
      "Properties": {
        "SubnetId": {
          "Ref": "Subnet"
        },
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "LaunchTemplate"
          },
          "Version": {
            "Fn::GetAtt": [
              "LaunchTemplate",
              "DefaultVersionNumber"
            ]
          }
        }
      }
    },
    "LaunchTemplate": {
      "Type": "AWS::EC2::LaunchTemplate",
      "Properties": {
        "LaunchTemplateData": {
          "ImageId": {
            "Fn::FindInMap": [
              "RegionConfig",
              {
                "Ref": "AWS::Region"
              },
              "AmiId"
            ]
          },
          "InstanceType": "t2.micro",
          "MetadataOptions": {
            "InstanceMetadataTags": "enabled"
          },
          "SecurityGroups": [],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "\n",
                [
                  "#!/bin/bash -xe",
                  "sudo yum -y install nmap || true",
                  "sudo ncat -k -c 'xargs echo' -l 80 &",
                  "sudo ncat -k -c 'xargs echo' -l 443 &",
                  "sudo ncat -k -c 'xargs echo' -l 1812 &",
                  "sudo ncat -k -c 'xargs echo' -l 1813 &",
                  "sudo ncat -k -c 'xargs echo' -l 1468 &",
                  "sudo ncat -k -c 'xargs echo' -l 3799 &",
                  "sudo ncat -k -c 'xargs echo' --udp -l 514 &",
                  "sudo ncat -k -c 'xargs echo' --udp -l 1812 &",
                  "sudo ncat -k -c 'xargs echo' --udp -l 1813 &",
                  "sudo ncat -k -c 'xargs echo' --udp -l 3799 &"
                ]
              ]
            }
          },
          "TagSpecifications": []
        }
      }
    },
    "Fn::ForEach::Accelerators": [
      "Key",
      {
        "Fn::FindInMap": [
          "Stacks",
          "Accelerators",
          "Keys"
        ]
      },
      {
        "Fn::ForEach::TcpPorts": [
          "TcpPort",
          {
            "Fn::FindInMap": [
              "Stacks",
              "TcpPorts",
              {
                "Ref": "Key"
              }
            ]
          },
          {
            "TcpEPG${Key}${TcpPort}": {
              "Type": "AWS::GlobalAccelerator::EndpointGroup",
              "Properties": {
                "ListenerArn": {
                  "Fn::FindInMap": [
                    "RegionConfig",
                    "GlobalOutputs",
                    {
                      "Fn::Sub": "TcpListener${Key}${TcpPort}Arn"
                    }
                  ]
                },
                "EndpointGroupRegion": {
                  "Ref": "AWS::Region"
                },
                "TrafficDialPercentage": 100.0,
                "EndpointConfigurations": [
                  {
                    "EndpointId": {
                      "Ref": "Instance"
                    }
                  }
                ]
              }
            }
          }
        ],
        "Fn::ForEach::UdpPorts": [
          "UdpPort",
          {
            "Fn::FindInMap": [
              "Stacks",
              "UdpPorts",
              {
                "Ref": "Key"
              }
            ]
          },
          {
            "UdpEPG${Key}${UdpPort}": {
              "Type": "AWS::GlobalAccelerator::EndpointGroup",
              "Properties": {
                "ListenerArn": {
                  "Fn::FindInMap": [
                    "RegionConfig",
                    "GlobalOutputs",
                    {
                      "Fn::Sub": "UdpListener${Key}${UdpPort}Arn"
                    }
                  ]
                },
                "EndpointGroupRegion": {
                  "Ref": "AWS::Region"
                },
                "TrafficDialPercentage": 100.0,
                "EndpointConfigurations": [
                  {
                    "EndpointId": {
                      "Ref": "Instance"
                    }
                  }
                ]
              }
            }
          }
        ]
      }
    ],
    "ResourceFinderLambdaRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "ManagedPolicyArns": [
          {
            "Ref": "ResourceFinderLambdaPolicy"
          }
        ],
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com"
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        }
      }
    },
    "ResourceFinderLambdaPolicy": {
      "Type": "AWS::IAM::ManagedPolicy",
      "Properties": {
        "Description": "Managed policy for a Lambda function launched by CloudFormation",
        "PolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "ec2:DescribeSecurityGroups",
                "ec2:DescribeManagedPrefixLists"
              ],
              "Resource": "*"
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogStream",
                "logs:PutLogEvents"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":logs:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":log-group:/aws/lambda/",
                    "*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "logs:CreateLogGroup"
              ],
              "Resource": {
                "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:*"
              }
            }
          ]
        }
      }
    },
    "ResourceFinderLambda": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Description": "Looks-up the GlobalAccelerator security group ID and Instance Connect prefix list ID needed for the ingress rules.",
        "MemorySize": 1024,
        "Runtime": "python3.12",
        "Timeout": 30,
        "Role": { "Fn::GetAtt": [ "ResourceFinderLambdaRole", "Arn" ] },
        "Handler": "index.lambda_handler",
        "Code": {
          "ZipFile": {
            "Fn::Join": [
              "\n",
              [
                "import boto3",
                "import cfnresponse",
                "ec2 = boto3.client('ec2')",
                "def lambda_handler(event, context):",
                "  try:",
                "    if event['RequestType'] == 'Delete':",
                "      cfnresponse.send(event, context, cfnresponse.SUCCESS, {}, \"\")",
                "",
                "    response = ec2.describe_security_groups(",
                "      Filters=[{'Name':'group-name','Values':['GlobalAccelerator']}]",
                "    )",
                "    gxsgid = ''",
                "    for sg in response['SecurityGroups']:",
                "      gxsgid = sg['GroupId']",
                "",
                "    response = ec2.describe_managed_prefix_lists(",
                {
                  "Fn::Sub": "      Filters=[{'Name':'prefix-list-name','Values':['com.amazonaws.${AWS::Region}.ec2-instance-connect']}]"
                },
                "    )",
                "    icplid = ''",
                "    for pl in response['PrefixLists']:",
                "      icplid = pl['PrefixListId']",
                "",
                "    responseData = {}",
                "    responseData['GlobalAcceleratorSecurityGroupId'] = gxsgid",
                "    responseData['InstanceConnectPrefixListId'] = icplid",
                "    cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData, \"CustomResourcePhysicalID\")",
                "  except:",
                "    cfnresponse.send(event, context, cfnresponse.FAILED, {}, \"\")"
              ]
            ]
          }
        }
      }
    },
    "ResourceFinder": {
      "Type": "Custom::ResourceFinder",
      "Properties": {
        "ServiceToken": {
          "Fn::GetAtt": [
            "ResourceFinderLambda",
            "Arn"
          ]
        }
      }
    },
    "ConnectRule": {
      "DependsOn": "ResourceFinder",
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "GroupId": {
          "Fn::GetAtt": [
            "Vpc",
            "DefaultSecurityGroup"
          ]
        },
        "IpProtocol": "tcp",
        "FromPort": 22,
        "ToPort": 22,
        "SourcePrefixListId": {
          "Fn::GetAtt": [
            "ResourceFinder",
            "InstanceConnectPrefixListId"
          ]
        }
      }
    },
    "GxIngressRule": {
      "DependsOn": [
        "ResourceFinder"
      ],
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "-1",
        "GroupId": {
          "Fn::GetAtt": [
            "Vpc",
            "DefaultSecurityGroup"
          ]
        },
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "ResourceFinder",
            "GlobalAcceleratorSecurityGroupId"
          ]
        }
      }
    }
  },
  "Outputs": {
    "InstanceId": {
      "Value": {
        "Ref": "Instance"
      }
    }
  }
}